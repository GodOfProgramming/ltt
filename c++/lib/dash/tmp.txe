g++ -Wall -Wextra -std=c++17 -O3 -march=native -frename-registers -funroll-loops -c -Iinclude -Isrc   src/main.cxx -o obj/main.out
In file included from src/main.cxx:1:
include/console.hpp:351:21: error: ‘MBlinkOff’ is not a member of ‘dash::M’; did you mean ‘BlinkOff’?
  351 |   struct m_tostr<M::MBlinkOff>
      |                     ^~~~~~~~~
      |                     BlinkOff
include/console.hpp:351:30: error: template argument 1 is invalid
  351 |   struct m_tostr<M::MBlinkOff>
      |                              ^
include/console.hpp:356:52: error: ‘Mod’ has not been declared
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |                                                    ^~~
include/console.hpp: In function ‘std::ostream& dash::operator<<(std::ostream&, int)’:
include/console.hpp:359:19: error: could not convert ‘dash::FG::Reset’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:359:4: note: in expansion of macro ‘FG_CASE_HELPER’
  359 |    FG_CASE_HELPER(Reset);
      |    ^~~~~~~~~~~~~~
include/console.hpp:360:19: error: could not convert ‘dash::FG::Black’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:360:4: note: in expansion of macro ‘FG_CASE_HELPER’
  360 |    FG_CASE_HELPER(Black);
      |    ^~~~~~~~~~~~~~
include/console.hpp:361:19: error: could not convert ‘dash::FG::Red’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~^~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:361:4: note: in expansion of macro ‘FG_CASE_HELPER’
  361 |    FG_CASE_HELPER(Red);
      |    ^~~~~~~~~~~~~~
include/console.hpp:362:19: error: could not convert ‘dash::FG::Green’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:362:4: note: in expansion of macro ‘FG_CASE_HELPER’
  362 |    FG_CASE_HELPER(Green);
      |    ^~~~~~~~~~~~~~
include/console.hpp:363:19: error: could not convert ‘dash::FG::Yellow’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~^~~~~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:363:4: note: in expansion of macro ‘FG_CASE_HELPER’
  363 |    FG_CASE_HELPER(Yellow);
      |    ^~~~~~~~~~~~~~
include/console.hpp:364:19: error: could not convert ‘dash::FG::Blue’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~^~~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:364:4: note: in expansion of macro ‘FG_CASE_HELPER’
  364 |    FG_CASE_HELPER(Blue);
      |    ^~~~~~~~~~~~~~
include/console.hpp:365:19: error: could not convert ‘dash::FG::Magenta’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~^~~~~~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:365:4: note: in expansion of macro ‘FG_CASE_HELPER’
  365 |    FG_CASE_HELPER(Magenta);
      |    ^~~~~~~~~~~~~~
include/console.hpp:366:19: error: could not convert ‘dash::FG::Cyan’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~^~~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:366:4: note: in expansion of macro ‘FG_CASE_HELPER’
  366 |    FG_CASE_HELPER(Cyan);
      |    ^~~~~~~~~~~~~~
include/console.hpp:367:19: error: could not convert ‘dash::FG::White’ from ‘dash::FG’ to ‘int’
   45 | #define FG_CASE_HELPER(mod) CASE_HELPER(FG, mod)
      |                                         ~~~~~~~~
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::FG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:367:4: note: in expansion of macro ‘FG_CASE_HELPER’
  367 |    FG_CASE_HELPER(White);
      |    ^~~~~~~~~~~~~~
include/console.hpp:370:19: error: could not convert ‘dash::BG::Reset’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:370:4: note: in expansion of macro ‘BG_CASE_HELPER’
  370 |    BG_CASE_HELPER(Reset);
      |    ^~~~~~~~~~~~~~
include/console.hpp:371:19: error: could not convert ‘dash::BG::Black’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:371:4: note: in expansion of macro ‘BG_CASE_HELPER’
  371 |    BG_CASE_HELPER(Black);
      |    ^~~~~~~~~~~~~~
include/console.hpp:372:19: error: could not convert ‘dash::BG::Red’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~^~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:372:4: note: in expansion of macro ‘BG_CASE_HELPER’
  372 |    BG_CASE_HELPER(Red);
      |    ^~~~~~~~~~~~~~
include/console.hpp:373:19: error: could not convert ‘dash::BG::Green’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:373:4: note: in expansion of macro ‘BG_CASE_HELPER’
  373 |    BG_CASE_HELPER(Green);
      |    ^~~~~~~~~~~~~~
include/console.hpp:374:19: error: could not convert ‘dash::BG::Yellow’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~^~~~~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:374:4: note: in expansion of macro ‘BG_CASE_HELPER’
  374 |    BG_CASE_HELPER(Yellow);
      |    ^~~~~~~~~~~~~~
include/console.hpp:375:19: error: could not convert ‘dash::BG::Blue’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~^~~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:375:4: note: in expansion of macro ‘BG_CASE_HELPER’
  375 |    BG_CASE_HELPER(Blue);
      |    ^~~~~~~~~~~~~~
include/console.hpp:376:19: error: could not convert ‘dash::BG::Magenta’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~^~~~~~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:376:4: note: in expansion of macro ‘BG_CASE_HELPER’
  376 |    BG_CASE_HELPER(Magenta);
      |    ^~~~~~~~~~~~~~
include/console.hpp:377:19: error: could not convert ‘dash::BG::Cyan’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~^~~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:377:4: note: in expansion of macro ‘BG_CASE_HELPER’
  377 |    BG_CASE_HELPER(Cyan);
      |    ^~~~~~~~~~~~~~
include/console.hpp:378:19: error: could not convert ‘dash::BG::White’ from ‘dash::BG’ to ‘int’
   46 | #define BG_CASE_HELPER(mod) CASE_HELPER(BG, mod)
      |                                         ~~~~~~~~
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::BG
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:378:4: note: in expansion of macro ‘BG_CASE_HELPER’
  378 |    BG_CASE_HELPER(White);
      |    ^~~~~~~~~~~~~~
include/console.hpp:381:19: error: could not convert ‘dash::FS::Bold’ from ‘dash::FS’ to ‘int’
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      |                                         ~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                    
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~^~~~
      |                   |
      |                   dash::FS
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:381:4: note: in expansion of macro ‘FS_CASE_HELPER’
  381 |    FS_CASE_HELPER(Bold);
      |    ^~~~~~~~~~~~~~
include/console.hpp:382:19: error: could not convert ‘dash::FS::Faint’ from ‘dash::FS’ to ‘int’
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      |                                         ~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                    
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~^~~~~
      |                   |
      |                   dash::FS
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:382:4: note: in expansion of macro ‘FS_CASE_HELPER’
  382 |    FS_CASE_HELPER(Faint);
      |    ^~~~~~~~~~~~~~
include/console.hpp:383:19: error: could not convert ‘dash::FS::Italic’ from ‘dash::FS’ to ‘int’
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      |                                         ~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                    
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  383 |    FS_CASE_HELPER(Italic);
      |    ~~~~~~~~~~~~~~~^~~~~~
      |                   |
      |                   dash::FS
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:383:4: note: in expansion of macro ‘FS_CASE_HELPER’
  383 |    FS_CASE_HELPER(Italic);
      |    ^~~~~~~~~~~~~~
include/console.hpp:384:19: error: could not convert ‘dash::FS::Underline’ from ‘dash::FS’ to ‘int’
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      |                                         ~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                    
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  383 |    FS_CASE_HELPER(Italic);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  384 |    FS_CASE_HELPER(Underline);
      |    ~~~~~~~~~~~~~~~^~~~~~~~~
      |                   |
      |                   dash::FS
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:384:4: note: in expansion of macro ‘FS_CASE_HELPER’
  384 |    FS_CASE_HELPER(Underline);
      |    ^~~~~~~~~~~~~~
include/console.hpp:385:19: error: could not convert ‘dash::FS::UnderlineOff’ from ‘dash::FS’ to ‘int’
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      |                                         ~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                    
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  383 |    FS_CASE_HELPER(Italic);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  384 |    FS_CASE_HELPER(Underline);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~
  385 |    FS_CASE_HELPER(UnderlineOff);
      |    ~~~~~~~~~~~~~~~^~~~~~~~~~~~
      |                   |
      |                   dash::FS
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:385:4: note: in expansion of macro ‘FS_CASE_HELPER’
  385 |    FS_CASE_HELPER(UnderlineOff);
      |    ^~~~~~~~~~~~~~
include/console.hpp:386:19: error: could not convert ‘dash::FS::CrossedOut’ from ‘dash::FS’ to ‘int’
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      |                                         ~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                    
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  383 |    FS_CASE_HELPER(Italic);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  384 |    FS_CASE_HELPER(Underline);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~
  385 |    FS_CASE_HELPER(UnderlineOff);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  386 |    FS_CASE_HELPER(CrossedOut);
      |    ~~~~~~~~~~~~~~~^~~~~~~~~~
      |                   |
      |                   dash::FS
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:386:4: note: in expansion of macro ‘FS_CASE_HELPER’
  386 |    FS_CASE_HELPER(CrossedOut);
      |    ^~~~~~~~~~~~~~
include/console.hpp:387:19: error: could not convert ‘dash::FS::CrossedOutOff’ from ‘dash::FS’ to ‘int’
   47 | #define FS_CASE_HELPER(mod) CASE_HELPER(FS, mod)
      |                                         ~~~~~~~~
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   49 | 
      |                    
   50 | namespace dash
      | ~~~~~~~~~~~~~~     
   51 | {
      | ~                  
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~   
   54 |   Reset,
      |   ~~~~~~           
   55 |   Black,
      |   ~~~~~~           
   56 |   Red,
      |   ~~~~             
   57 |   Green,
      |   ~~~~~~           
   58 |   Yellow,
      |   ~~~~~~~          
   59 |   Blue,
      |   ~~~~~            
   60 |   Magenta,
      |   ~~~~~~~~         
   61 |   Cyan,
      |   ~~~~~            
   62 |   White,
      |   ~~~~~~           
   63 |  };
      |  ~~                
   64 | 
      |                    
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~   
   67 |   Reset,
      |   ~~~~~~           
   68 |   Black,
      |   ~~~~~~           
   69 |   Red,
      |   ~~~~             
   70 |   Green,
      |   ~~~~~~           
   71 |   Yellow,
      |   ~~~~~~~          
   72 |   Blue,
      |   ~~~~~            
   73 |   Magenta,
      |   ~~~~~~~~         
   74 |   Cyan,
      |   ~~~~~            
   75 |   White,
      |   ~~~~~~           
   76 |  };
      |  ~~                
   77 | 
      |                    
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~  
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~   
   80 |   Bold,
      |   ~~~~~            
   81 |   Faint,
      |   ~~~~~~           
   82 |   Italic,
      |   ~~~~~~~          
   83 |   Underline,
      |   ~~~~~~~~~~       
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~    
   85 |   CrossedOut,
      |   ~~~~~~~~~~~      
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~   
   87 |  };
      |  ~~                
   88 | 
      |                    
   89 |  /* Misc */
      |  ~~~~~~~~~~        
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~    
   91 |   FullReset,
      |   ~~~~~~~~~~       
   92 |   SlowBlink,
      |   ~~~~~~~~~~       
   93 |   BlinkOff
      |   ~~~~~~~~         
   94 |  };
      |  ~~                
   95 | 
      |                    
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~   
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~  
   98 |   {
      |   ~                
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~               
  101 | 
      |                    
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~   
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~  
  104 |   {
      |   ~                
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~               
  107 | 
      |                    
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~   
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~  
  110 |   {
      |   ~                
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~               
  113 | 
      |                    
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~    
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~   
  116 |   {
      |   ~                
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~               
  119 | 
      |                    
  120 |  class Console
      |  ~~~~~~~~~~~~~     
  121 |  {
      |  ~                 
  122 |   public:
      |   ~~~~~~~          
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                    
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~ 
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~              
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~              
  130 | 
      |                    
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~ 
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~              
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~              
  136 | 
      |                    
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~ 
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~              
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~              
  142 | 
      |                    
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~  
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~              
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~              
  148 | 
      |                    
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~              
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~ 
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~              
  156 | 
      |                    
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~              
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~              
  162 | 
      |                    
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~              
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~              
  168 | 
      |                    
  169 |   private:
      |   ~~~~~~~~         
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~                
  173 | 
      |                    
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                 
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                 
  183 | 
      |                    
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~   
  185 |  template <>
      |  ~~~~~~~~~~~       
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~                
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~               
  190 | 
      |                    
  191 |  template <>
      |  ~~~~~~~~~~~       
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~                
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~               
  196 | 
      |                    
  197 |  template <>
      |  ~~~~~~~~~~~       
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~                
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~               
  202 | 
      |                    
  203 |  template <>
      |  ~~~~~~~~~~~       
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~                
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~               
  208 | 
      |                    
  209 |  template <>
      |  ~~~~~~~~~~~       
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~                
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~               
  214 | 
      |                    
  215 |  template <>
      |  ~~~~~~~~~~~       
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~                
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~               
  220 | 
      |                    
  221 |  template <>
      |  ~~~~~~~~~~~       
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~                
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~               
  226 | 
      |                    
  227 |  template <>
      |  ~~~~~~~~~~~       
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~                
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~               
  232 | 
      |                    
  233 |  template <>
      |  ~~~~~~~~~~~       
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~                
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~               
  238 | 
      |                    
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~  
  240 |  template <>
      |  ~~~~~~~~~~~       
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~                
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~               
  245 | 
      |                    
  246 |  template <>
      |  ~~~~~~~~~~~       
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~                
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~               
  251 | 
      |                    
  252 |  template <>
      |  ~~~~~~~~~~~       
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~                
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~               
  257 | 
      |                    
  258 |  template <>
      |  ~~~~~~~~~~~       
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~                
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~               
  263 | 
      |                    
  264 |  template <>
      |  ~~~~~~~~~~~       
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~                
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~               
  269 | 
      |                    
  270 |  template <>
      |  ~~~~~~~~~~~       
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~                
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~               
  275 | 
      |                    
  276 |  template <>
      |  ~~~~~~~~~~~       
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~                
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~               
  281 | 
      |                    
  282 |  template <>
      |  ~~~~~~~~~~~       
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~                
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~               
  287 | 
      |                    
  288 |  template <>
      |  ~~~~~~~~~~~       
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~                
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~               
  293 | 
      |                    
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~ 
  295 |  template <>
      |  ~~~~~~~~~~~       
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~                
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~               
  300 | 
      |                    
  301 |  template <>
      |  ~~~~~~~~~~~       
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~                
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~               
  306 | 
      |                    
  307 |  template <>
      |  ~~~~~~~~~~~       
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~                
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~               
  312 | 
      |                    
  313 |  template <>
      |  ~~~~~~~~~~~       
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~                
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~               
  318 | 
      |                    
  319 |  template <>
      |  ~~~~~~~~~~~       
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~                
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~               
  324 | 
      |                    
  325 |  template <>
      |  ~~~~~~~~~~~       
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~                
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~               
  330 | 
      |                    
  331 |  template <>
      |  ~~~~~~~~~~~       
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~                
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~               
  336 | 
      |                    
  337 |  /* Misc */
      |  ~~~~~~~~~~        
  338 |  template <>
      |  ~~~~~~~~~~~       
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~                
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~               
  343 | 
      |                    
  344 |  template <>
      |  ~~~~~~~~~~~       
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~                
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~               
  349 | 
      |                    
  350 |  template <>
      |  ~~~~~~~~~~~       
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~                
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~               
  355 | 
      |                    
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~      
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~ 
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                    
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                    
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  383 |    FS_CASE_HELPER(Italic);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  384 |    FS_CASE_HELPER(Underline);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~
  385 |    FS_CASE_HELPER(UnderlineOff);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  386 |    FS_CASE_HELPER(CrossedOut);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  387 |    FS_CASE_HELPER(CrossedOutOff);
      |    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~
      |                   |
      |                   dash::FS
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:387:4: note: in expansion of macro ‘FS_CASE_HELPER’
  387 |    FS_CASE_HELPER(CrossedOutOff);
      |    ^~~~~~~~~~~~~~
include/console.hpp:390:18: error: could not convert ‘dash::M::FullReset’ from ‘dash::M’ to ‘int’
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      |                                        ~~~~~~~
   49 | 
      |                   
   50 | namespace dash
      | ~~~~~~~~~~~~~~    
   51 | {
      | ~                 
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~  
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~  
   54 |   Reset,
      |   ~~~~~~          
   55 |   Black,
      |   ~~~~~~          
   56 |   Red,
      |   ~~~~            
   57 |   Green,
      |   ~~~~~~          
   58 |   Yellow,
      |   ~~~~~~~         
   59 |   Blue,
      |   ~~~~~           
   60 |   Magenta,
      |   ~~~~~~~~        
   61 |   Cyan,
      |   ~~~~~           
   62 |   White,
      |   ~~~~~~          
   63 |  };
      |  ~~               
   64 | 
      |                   
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~ 
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~  
   67 |   Reset,
      |   ~~~~~~          
   68 |   Black,
      |   ~~~~~~          
   69 |   Red,
      |   ~~~~            
   70 |   Green,
      |   ~~~~~~          
   71 |   Yellow,
      |   ~~~~~~~         
   72 |   Blue,
      |   ~~~~~           
   73 |   Magenta,
      |   ~~~~~~~~        
   74 |   Cyan,
      |   ~~~~~           
   75 |   White,
      |   ~~~~~~          
   76 |  };
      |  ~~               
   77 | 
      |                   
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~ 
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~  
   80 |   Bold,
      |   ~~~~~           
   81 |   Faint,
      |   ~~~~~~          
   82 |   Italic,
      |   ~~~~~~~         
   83 |   Underline,
      |   ~~~~~~~~~~      
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~   
   85 |   CrossedOut,
      |   ~~~~~~~~~~~     
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~  
   87 |  };
      |  ~~               
   88 | 
      |                   
   89 |  /* Misc */
      |  ~~~~~~~~~~       
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~   
   91 |   FullReset,
      |   ~~~~~~~~~~      
   92 |   SlowBlink,
      |   ~~~~~~~~~~      
   93 |   BlinkOff
      |   ~~~~~~~~        
   94 |  };
      |  ~~               
   95 | 
      |                   
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~  
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~ 
   98 |   {
      |   ~               
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~              
  101 | 
      |                   
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~  
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~ 
  104 |   {
      |   ~               
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~              
  107 | 
      |                   
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~  
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~ 
  110 |   {
      |   ~               
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~              
  113 | 
      |                   
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~   
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~  
  116 |   {
      |   ~               
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~              
  119 | 
      |                   
  120 |  class Console
      |  ~~~~~~~~~~~~~    
  121 |  {
      |  ~                
  122 |   public:
      |   ~~~~~~~         
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                   
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~             
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~             
  130 | 
      |                   
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~             
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~             
  136 | 
      |                   
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~             
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~             
  142 | 
      |                   
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~ 
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~             
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~             
  148 | 
      |                   
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~             
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~             
  156 | 
      |                   
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~             
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~             
  162 | 
      |                   
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~             
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~             
  168 | 
      |                   
  169 |   private:
      |   ~~~~~~~~        
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~               
  173 | 
      |                   
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                
  183 | 
      |                   
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~  
  185 |  template <>
      |  ~~~~~~~~~~~      
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~               
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~              
  190 | 
      |                   
  191 |  template <>
      |  ~~~~~~~~~~~      
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~               
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~              
  196 | 
      |                   
  197 |  template <>
      |  ~~~~~~~~~~~      
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~               
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~              
  202 | 
      |                   
  203 |  template <>
      |  ~~~~~~~~~~~      
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~               
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~              
  208 | 
      |                   
  209 |  template <>
      |  ~~~~~~~~~~~      
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~               
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~              
  214 | 
      |                   
  215 |  template <>
      |  ~~~~~~~~~~~      
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~               
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~              
  220 | 
      |                   
  221 |  template <>
      |  ~~~~~~~~~~~      
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~               
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~              
  226 | 
      |                   
  227 |  template <>
      |  ~~~~~~~~~~~      
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~               
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~              
  232 | 
      |                   
  233 |  template <>
      |  ~~~~~~~~~~~      
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~               
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~              
  238 | 
      |                   
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~ 
  240 |  template <>
      |  ~~~~~~~~~~~      
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~               
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~              
  245 | 
      |                   
  246 |  template <>
      |  ~~~~~~~~~~~      
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~               
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~              
  251 | 
      |                   
  252 |  template <>
      |  ~~~~~~~~~~~      
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~               
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~              
  257 | 
      |                   
  258 |  template <>
      |  ~~~~~~~~~~~      
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~               
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~              
  263 | 
      |                   
  264 |  template <>
      |  ~~~~~~~~~~~      
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~               
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~              
  269 | 
      |                   
  270 |  template <>
      |  ~~~~~~~~~~~      
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~               
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~              
  275 | 
      |                   
  276 |  template <>
      |  ~~~~~~~~~~~      
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~               
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~              
  281 | 
      |                   
  282 |  template <>
      |  ~~~~~~~~~~~      
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~               
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~              
  287 | 
      |                   
  288 |  template <>
      |  ~~~~~~~~~~~      
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~               
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~              
  293 | 
      |                   
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~
  295 |  template <>
      |  ~~~~~~~~~~~      
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~               
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~              
  300 | 
      |                   
  301 |  template <>
      |  ~~~~~~~~~~~      
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~               
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~              
  306 | 
      |                   
  307 |  template <>
      |  ~~~~~~~~~~~      
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~               
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~              
  312 | 
      |                   
  313 |  template <>
      |  ~~~~~~~~~~~      
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~               
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~              
  318 | 
      |                   
  319 |  template <>
      |  ~~~~~~~~~~~      
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~               
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~              
  324 | 
      |                   
  325 |  template <>
      |  ~~~~~~~~~~~      
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~               
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~              
  330 | 
      |                   
  331 |  template <>
      |  ~~~~~~~~~~~      
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~               
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~              
  336 | 
      |                   
  337 |  /* Misc */
      |  ~~~~~~~~~~       
  338 |  template <>
      |  ~~~~~~~~~~~      
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~               
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~              
  343 | 
      |                   
  344 |  template <>
      |  ~~~~~~~~~~~      
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~               
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~              
  349 | 
      |                   
  350 |  template <>
      |  ~~~~~~~~~~~      
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~               
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~              
  355 | 
      |                   
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~     
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                   
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                   
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  383 |    FS_CASE_HELPER(Italic);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  384 |    FS_CASE_HELPER(Underline);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~
  385 |    FS_CASE_HELPER(UnderlineOff);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  386 |    FS_CASE_HELPER(CrossedOut);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  387 |    FS_CASE_HELPER(CrossedOutOff);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  388 | 
      |                   
  389 |    /* Misc */
      |    ~~~~~~~~~~     
  390 |    M_CASE_HELPER(FullReset);
      |    ~~~~~~~~~~~~~~^~~~~~~~~
      |                  |
      |                  dash::M
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:390:4: note: in expansion of macro ‘M_CASE_HELPER’
  390 |    M_CASE_HELPER(FullReset);
      |    ^~~~~~~~~~~~~
include/console.hpp:391:18: error: could not convert ‘dash::M::SlowBlink’ from ‘dash::M’ to ‘int’
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      |                                        ~~~~~~~
   49 | 
      |                   
   50 | namespace dash
      | ~~~~~~~~~~~~~~    
   51 | {
      | ~                 
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~  
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~  
   54 |   Reset,
      |   ~~~~~~          
   55 |   Black,
      |   ~~~~~~          
   56 |   Red,
      |   ~~~~            
   57 |   Green,
      |   ~~~~~~          
   58 |   Yellow,
      |   ~~~~~~~         
   59 |   Blue,
      |   ~~~~~           
   60 |   Magenta,
      |   ~~~~~~~~        
   61 |   Cyan,
      |   ~~~~~           
   62 |   White,
      |   ~~~~~~          
   63 |  };
      |  ~~               
   64 | 
      |                   
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~ 
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~  
   67 |   Reset,
      |   ~~~~~~          
   68 |   Black,
      |   ~~~~~~          
   69 |   Red,
      |   ~~~~            
   70 |   Green,
      |   ~~~~~~          
   71 |   Yellow,
      |   ~~~~~~~         
   72 |   Blue,
      |   ~~~~~           
   73 |   Magenta,
      |   ~~~~~~~~        
   74 |   Cyan,
      |   ~~~~~           
   75 |   White,
      |   ~~~~~~          
   76 |  };
      |  ~~               
   77 | 
      |                   
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~ 
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~  
   80 |   Bold,
      |   ~~~~~           
   81 |   Faint,
      |   ~~~~~~          
   82 |   Italic,
      |   ~~~~~~~         
   83 |   Underline,
      |   ~~~~~~~~~~      
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~   
   85 |   CrossedOut,
      |   ~~~~~~~~~~~     
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~  
   87 |  };
      |  ~~               
   88 | 
      |                   
   89 |  /* Misc */
      |  ~~~~~~~~~~       
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~   
   91 |   FullReset,
      |   ~~~~~~~~~~      
   92 |   SlowBlink,
      |   ~~~~~~~~~~      
   93 |   BlinkOff
      |   ~~~~~~~~        
   94 |  };
      |  ~~               
   95 | 
      |                   
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~  
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~ 
   98 |   {
      |   ~               
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~              
  101 | 
      |                   
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~  
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~ 
  104 |   {
      |   ~               
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~              
  107 | 
      |                   
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~  
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~ 
  110 |   {
      |   ~               
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~              
  113 | 
      |                   
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~   
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~  
  116 |   {
      |   ~               
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~              
  119 | 
      |                   
  120 |  class Console
      |  ~~~~~~~~~~~~~    
  121 |  {
      |  ~                
  122 |   public:
      |   ~~~~~~~         
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                   
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~             
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~             
  130 | 
      |                   
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~             
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~             
  136 | 
      |                   
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~             
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~             
  142 | 
      |                   
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~ 
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~             
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~             
  148 | 
      |                   
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~             
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~             
  156 | 
      |                   
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~             
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~             
  162 | 
      |                   
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~             
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~             
  168 | 
      |                   
  169 |   private:
      |   ~~~~~~~~        
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~               
  173 | 
      |                   
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                
  183 | 
      |                   
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~  
  185 |  template <>
      |  ~~~~~~~~~~~      
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~               
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~              
  190 | 
      |                   
  191 |  template <>
      |  ~~~~~~~~~~~      
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~               
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~              
  196 | 
      |                   
  197 |  template <>
      |  ~~~~~~~~~~~      
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~               
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~              
  202 | 
      |                   
  203 |  template <>
      |  ~~~~~~~~~~~      
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~               
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~              
  208 | 
      |                   
  209 |  template <>
      |  ~~~~~~~~~~~      
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~               
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~              
  214 | 
      |                   
  215 |  template <>
      |  ~~~~~~~~~~~      
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~               
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~              
  220 | 
      |                   
  221 |  template <>
      |  ~~~~~~~~~~~      
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~               
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~              
  226 | 
      |                   
  227 |  template <>
      |  ~~~~~~~~~~~      
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~               
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~              
  232 | 
      |                   
  233 |  template <>
      |  ~~~~~~~~~~~      
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~               
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~              
  238 | 
      |                   
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~ 
  240 |  template <>
      |  ~~~~~~~~~~~      
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~               
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~              
  245 | 
      |                   
  246 |  template <>
      |  ~~~~~~~~~~~      
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~               
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~              
  251 | 
      |                   
  252 |  template <>
      |  ~~~~~~~~~~~      
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~               
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~              
  257 | 
      |                   
  258 |  template <>
      |  ~~~~~~~~~~~      
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~               
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~              
  263 | 
      |                   
  264 |  template <>
      |  ~~~~~~~~~~~      
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~               
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~              
  269 | 
      |                   
  270 |  template <>
      |  ~~~~~~~~~~~      
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~               
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~              
  275 | 
      |                   
  276 |  template <>
      |  ~~~~~~~~~~~      
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~               
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~              
  281 | 
      |                   
  282 |  template <>
      |  ~~~~~~~~~~~      
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~               
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~              
  287 | 
      |                   
  288 |  template <>
      |  ~~~~~~~~~~~      
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~               
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~              
  293 | 
      |                   
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~
  295 |  template <>
      |  ~~~~~~~~~~~      
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~               
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~              
  300 | 
      |                   
  301 |  template <>
      |  ~~~~~~~~~~~      
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~               
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~              
  306 | 
      |                   
  307 |  template <>
      |  ~~~~~~~~~~~      
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~               
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~              
  312 | 
      |                   
  313 |  template <>
      |  ~~~~~~~~~~~      
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~               
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~              
  318 | 
      |                   
  319 |  template <>
      |  ~~~~~~~~~~~      
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~               
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~              
  324 | 
      |                   
  325 |  template <>
      |  ~~~~~~~~~~~      
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~               
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~              
  330 | 
      |                   
  331 |  template <>
      |  ~~~~~~~~~~~      
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~               
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~              
  336 | 
      |                   
  337 |  /* Misc */
      |  ~~~~~~~~~~       
  338 |  template <>
      |  ~~~~~~~~~~~      
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~               
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~              
  343 | 
      |                   
  344 |  template <>
      |  ~~~~~~~~~~~      
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~               
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~              
  349 | 
      |                   
  350 |  template <>
      |  ~~~~~~~~~~~      
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~               
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~              
  355 | 
      |                   
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~     
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                   
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                   
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  383 |    FS_CASE_HELPER(Italic);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  384 |    FS_CASE_HELPER(Underline);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~
  385 |    FS_CASE_HELPER(UnderlineOff);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  386 |    FS_CASE_HELPER(CrossedOut);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  387 |    FS_CASE_HELPER(CrossedOutOff);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  388 | 
      |                   
  389 |    /* Misc */
      |    ~~~~~~~~~~     
  390 |    M_CASE_HELPER(FullReset);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~
  391 |    M_CASE_HELPER(SlowBlink);
      |    ~~~~~~~~~~~~~~^~~~~~~~~
      |                  |
      |                  dash::M
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:391:4: note: in expansion of macro ‘M_CASE_HELPER’
  391 |    M_CASE_HELPER(SlowBlink);
      |    ^~~~~~~~~~~~~
include/console.hpp:392:18: error: could not convert ‘dash::M::BlinkOff’ from ‘dash::M’ to ‘int’
   48 | #define M_CASE_HELPER(mod) CASE_HELPER(M, mod)
      |                                        ~~~~~~~
   49 | 
      |                   
   50 | namespace dash
      | ~~~~~~~~~~~~~~    
   51 | {
      | ~                 
   52 |  /* Forground */
      |  ~~~~~~~~~~~~~~~  
   53 |  enum class FG {
      |  ~~~~~~~~~~~~~~~  
   54 |   Reset,
      |   ~~~~~~          
   55 |   Black,
      |   ~~~~~~          
   56 |   Red,
      |   ~~~~            
   57 |   Green,
      |   ~~~~~~          
   58 |   Yellow,
      |   ~~~~~~~         
   59 |   Blue,
      |   ~~~~~           
   60 |   Magenta,
      |   ~~~~~~~~        
   61 |   Cyan,
      |   ~~~~~           
   62 |   White,
      |   ~~~~~~          
   63 |  };
      |  ~~               
   64 | 
      |                   
   65 |  /* Background */
      |  ~~~~~~~~~~~~~~~~ 
   66 |  enum class BG {
      |  ~~~~~~~~~~~~~~~  
   67 |   Reset,
      |   ~~~~~~          
   68 |   Black,
      |   ~~~~~~          
   69 |   Red,
      |   ~~~~            
   70 |   Green,
      |   ~~~~~~          
   71 |   Yellow,
      |   ~~~~~~~         
   72 |   Blue,
      |   ~~~~~           
   73 |   Magenta,
      |   ~~~~~~~~        
   74 |   Cyan,
      |   ~~~~~           
   75 |   White,
      |   ~~~~~~          
   76 |  };
      |  ~~               
   77 | 
      |                   
   78 |  /* Font Style */
      |  ~~~~~~~~~~~~~~~~ 
   79 |  enum class FS {
      |  ~~~~~~~~~~~~~~~  
   80 |   Bold,
      |   ~~~~~           
   81 |   Faint,
      |   ~~~~~~          
   82 |   Italic,
      |   ~~~~~~~         
   83 |   Underline,
      |   ~~~~~~~~~~      
   84 |   UnderlineOff,
      |   ~~~~~~~~~~~~~   
   85 |   CrossedOut,
      |   ~~~~~~~~~~~     
   86 |   CrossedOutOff,
      |   ~~~~~~~~~~~~~~  
   87 |  };
      |  ~~               
   88 | 
      |                   
   89 |  /* Misc */
      |  ~~~~~~~~~~       
   90 |  enum class M {
      |  ~~~~~~~~~~~~~~   
   91 |   FullReset,
      |   ~~~~~~~~~~      
   92 |   SlowBlink,
      |   ~~~~~~~~~~      
   93 |   BlinkOff
      |   ~~~~~~~~        
   94 |  };
      |  ~~               
   95 | 
      |                   
   96 |  template <FG E>
      |  ~~~~~~~~~~~~~~~  
   97 |   struct fg_tostr
      |   ~~~~~~~~~~~~~~~ 
   98 |   {
      |   ~               
   99 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |   };
      |   ~~              
  101 | 
      |                   
  102 |  template <BG E>
      |  ~~~~~~~~~~~~~~~  
  103 |   struct bg_tostr
      |   ~~~~~~~~~~~~~~~ 
  104 |   {
      |   ~               
  105 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  106 |   };
      |   ~~              
  107 | 
      |                   
  108 |  template <FS E>
      |  ~~~~~~~~~~~~~~~  
  109 |   struct fs_tostr
      |   ~~~~~~~~~~~~~~~ 
  110 |   {
      |   ~               
  111 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  112 |   };
      |   ~~              
  113 | 
      |                   
  114 |  template <M E>
      |  ~~~~~~~~~~~~~~   
  115 |   struct m_tostr
      |   ~~~~~~~~~~~~~~  
  116 |   {
      |   ~               
  117 |    const char* const value = nullptr;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |   };
      |   ~~              
  119 | 
      |                   
  120 |  class Console
      |  ~~~~~~~~~~~~~    
  121 |  {
      |  ~                
  122 |   public:
      |   ~~~~~~~         
  123 |    Console() = default;
      |    ~~~~~~~~~~~~~~~~~~~~
  124 | 
      |                   
  125 |    template <FG E>
      |    ~~~~~~~~~~~~~~~
  126 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     {
      |     ~             
  128 |      return fg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     }
      |     ~             
  130 | 
      |                   
  131 |    template <BG E>
      |    ~~~~~~~~~~~~~~~
  132 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |     {
      |     ~             
  134 |      return bg_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |     }
      |     ~             
  136 | 
      |                   
  137 |    template <FS E>
      |    ~~~~~~~~~~~~~~~
  138 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  139 |     {
      |     ~             
  140 |      return fs_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 |     }
      |     ~             
  142 | 
      |                   
  143 |    template <M E>
      |    ~~~~~~~~~~~~~~ 
  144 |     constexpr static inline const char* Opt()
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  145 |     {
      |     ~             
  146 |      return m_tostr<E>().value;
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~
  147 |     }
      |     ~             
  148 | 
      |                   
  149 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  150 |     void write(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
  151 |     {
      |     ~             
  152 |      mLock.lock();
      |      ~~~~~~~~~~~~~
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |      mLock.unlock();
      |      ~~~~~~~~~~~~~~~
  155 |     }
      |     ~             
  156 | 
      |                   
  157 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  158 |     void writeLine(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |     {
      |     ~             
  160 |      write(args..., '\n');
      |      ~~~~~~~~~~~~~~~~~~~~~
  161 |     }
      |     ~             
  162 | 
      |                   
  163 |    template <typename... Args>
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |     void log(Args&&... args)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  165 |     {
      |     ~             
  166 |      writeLine('[', StrTime(), "] ", args...);
      |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |     }
      |     ~             
  168 | 
      |                   
  169 |   private:
      |   ~~~~~~~~        
  170 |    static std::string StrTime();
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  171 |    std::mutex mLock;
      |    ~~~~~~~~~~~~~~~~~
  172 |  };
      |  ~~               
  173 | 
      |                   
  174 |  inline std::string Console::StrTime()
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  175 |  {
      |  ~                
  176 |   char timebuff[16];
      |   ~~~~~~~~~~~~~~~~~~
  177 |   bzero(timebuff, sizeof(timebuff));
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  178 |   auto t = time(nullptr);
      |   ~~~~~~~~~~~~~~~~~~~~~~~
  179 |   auto timestruct = localtime(&t);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  180 |   std::strftime(timebuff, sizeof(timebuff) - 1, "%I:%M:%S %P", timestruct);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  181 |   return std::string(timebuff);
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  182 |  }
      |  ~                
  183 | 
      |                   
  184 |  /* Forground */
      |  ~~~~~~~~~~~~~~~  
  185 |  template <>
      |  ~~~~~~~~~~~      
  186 |   struct fg_tostr<FG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  187 |   {
      |   ~               
  188 |    const char* const value = CODE_FORGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |   };
      |   ~~              
  190 | 
      |                   
  191 |  template <>
      |  ~~~~~~~~~~~      
  192 |   struct fg_tostr<FG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |   {
      |   ~               
  194 |    const char* const value = CODE_FORGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |   };
      |   ~~              
  196 | 
      |                   
  197 |  template <>
      |  ~~~~~~~~~~~      
  198 |   struct fg_tostr<FG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  199 |   {
      |   ~               
  200 |    const char* const value = CODE_FORGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  201 |   };
      |   ~~              
  202 | 
      |                   
  203 |  template <>
      |  ~~~~~~~~~~~      
  204 |   struct fg_tostr<FG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  205 |   {
      |   ~               
  206 |    const char* const value = CODE_FORGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  207 |   };
      |   ~~              
  208 | 
      |                   
  209 |  template <>
      |  ~~~~~~~~~~~      
  210 |   struct fg_tostr<FG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |   {
      |   ~               
  212 |    const char* const value = CODE_FORGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  213 |   };
      |   ~~              
  214 | 
      |                   
  215 |  template <>
      |  ~~~~~~~~~~~      
  216 |   struct fg_tostr<FG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  217 |   {
      |   ~               
  218 |    const char* const value = CODE_FORGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  219 |   };
      |   ~~              
  220 | 
      |                   
  221 |  template <>
      |  ~~~~~~~~~~~      
  222 |   struct fg_tostr<FG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  223 |   {
      |   ~               
  224 |    const char* const value = CODE_FORGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  225 |   };
      |   ~~              
  226 | 
      |                   
  227 |  template <>
      |  ~~~~~~~~~~~      
  228 |   struct fg_tostr<FG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  229 |   {
      |   ~               
  230 |    const char* const value = CODE_FORGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  231 |   };
      |   ~~              
  232 | 
      |                   
  233 |  template <>
      |  ~~~~~~~~~~~      
  234 |   struct fg_tostr<FG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  235 |   {
      |   ~               
  236 |    const char* const value = CODE_FORGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  237 |   };
      |   ~~              
  238 | 
      |                   
  239 |  /* Background */
      |  ~~~~~~~~~~~~~~~~ 
  240 |  template <>
      |  ~~~~~~~~~~~      
  241 |   struct bg_tostr<BG::Reset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |   {
      |   ~               
  243 |    const char* const value = CODE_BACKGROUND_RESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  244 |   };
      |   ~~              
  245 | 
      |                   
  246 |  template <>
      |  ~~~~~~~~~~~      
  247 |   struct bg_tostr<BG::Black>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  248 |   {
      |   ~               
  249 |    const char* const value = CODE_BACKGROUND_BLACK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  250 |   };
      |   ~~              
  251 | 
      |                   
  252 |  template <>
      |  ~~~~~~~~~~~      
  253 |   struct bg_tostr<BG::Red>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~
  254 |   {
      |   ~               
  255 |    const char* const value = CODE_BACKGROUND_RED;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  256 |   };
      |   ~~              
  257 | 
      |                   
  258 |  template <>
      |  ~~~~~~~~~~~      
  259 |   struct bg_tostr<BG::Green>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |   {
      |   ~               
  261 |    const char* const value = CODE_BACKGROUND_GREEN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  262 |   };
      |   ~~              
  263 | 
      |                   
  264 |  template <>
      |  ~~~~~~~~~~~      
  265 |   struct bg_tostr<BG::Yellow>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  266 |   {
      |   ~               
  267 |    const char* const value = CODE_BACKGROUND_YELLOW;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  268 |   };
      |   ~~              
  269 | 
      |                   
  270 |  template <>
      |  ~~~~~~~~~~~      
  271 |   struct bg_tostr<BG::Blue>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  272 |   {
      |   ~               
  273 |    const char* const value = CODE_BACKGROUND_BLUE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |   };
      |   ~~              
  275 | 
      |                   
  276 |  template <>
      |  ~~~~~~~~~~~      
  277 |   struct bg_tostr<BG::Magenta>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  278 |   {
      |   ~               
  279 |    const char* const value = CODE_BACKGROUND_MAGENTA;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  280 |   };
      |   ~~              
  281 | 
      |                   
  282 |  template <>
      |  ~~~~~~~~~~~      
  283 |   struct bg_tostr<BG::Cyan>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  284 |   {
      |   ~               
  285 |    const char* const value = CODE_BACKGROUND_CYAN;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  286 |   };
      |   ~~              
  287 | 
      |                   
  288 |  template <>
      |  ~~~~~~~~~~~      
  289 |   struct bg_tostr<BG::White>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  290 |   {
      |   ~               
  291 |    const char* const value = CODE_BACKGROUND_WHITE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 |   };
      |   ~~              
  293 | 
      |                   
  294 |  /* Font styles */
      |  ~~~~~~~~~~~~~~~~~
  295 |  template <>
      |  ~~~~~~~~~~~      
  296 |   struct fs_tostr<FS::Bold>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |   {
      |   ~               
  298 |    const char* const value = CODE_FONTSTYLE_BOLD;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  299 |   };
      |   ~~              
  300 | 
      |                   
  301 |  template <>
      |  ~~~~~~~~~~~      
  302 |   struct fs_tostr<FS::Faint>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~
  303 |   {
      |   ~               
  304 |    const char* const value = CODE_FONTSTYLE_FAINT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  305 |   };
      |   ~~              
  306 | 
      |                   
  307 |  template <>
      |  ~~~~~~~~~~~      
  308 |   struct fs_tostr<FS::Italic>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  309 |   {
      |   ~               
  310 |    const char* const value = CODE_FONTSTYLE_ITALIC;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  311 |   };
      |   ~~              
  312 | 
      |                   
  313 |  template <>
      |  ~~~~~~~~~~~      
  314 |   struct fs_tostr<FS::Underline>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |   {
      |   ~               
  316 |    const char* const value = CODE_FONTSTYLE_UNDERLINE;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |   };
      |   ~~              
  318 | 
      |                   
  319 |  template <>
      |  ~~~~~~~~~~~      
  320 |   struct fs_tostr<FS::UnderlineOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  321 |   {
      |   ~               
  322 |    const char* const value = CODE_FONTSTYLE_UNDERLINE_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  323 |   };
      |   ~~              
  324 | 
      |                   
  325 |  template <>
      |  ~~~~~~~~~~~      
  326 |   struct fs_tostr<FS::CrossedOut>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  327 |   {
      |   ~               
  328 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  329 |   };
      |   ~~              
  330 | 
      |                   
  331 |  template <>
      |  ~~~~~~~~~~~      
  332 |   struct fs_tostr<FS::CrossedOutOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  333 |   {
      |   ~               
  334 |    const char* const value = CODE_FONTSTYLE_CROSSEDOUT_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  335 |   };
      |   ~~              
  336 | 
      |                   
  337 |  /* Misc */
      |  ~~~~~~~~~~       
  338 |  template <>
      |  ~~~~~~~~~~~      
  339 |   struct m_tostr<M::FullReset>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |   {
      |   ~               
  341 |    const char* const value = CODE_MISC_FULLRESET;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  342 |   };
      |   ~~              
  343 | 
      |                   
  344 |  template <>
      |  ~~~~~~~~~~~      
  345 |   struct m_tostr<M::SlowBlink>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  346 |   {
      |   ~               
  347 |    const char* const value = CODE_MISC_SLOWBLINK;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  348 |   };
      |   ~~              
  349 | 
      |                   
  350 |  template <>
      |  ~~~~~~~~~~~      
  351 |   struct m_tostr<M::MBlinkOff>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  352 |   {
      |   ~               
  353 |    const char* const value = CODE_MISC_BLINK_OFF;
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  354 |   };
      |   ~~              
  355 | 
      |                   
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |   switch(m) {
      |   ~~~~~~~~~~~     
  358 |    /* Forground */
      |    ~~~~~~~~~~~~~~~
  359 |    FG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  360 |    FG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  361 |    FG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  362 |    FG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  363 |    FG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  364 |    FG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  365 |    FG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  366 |    FG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  367 |    FG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  368 | 
      |                   
  369 |    /* Background */
      |    ~~~~~~~~~~~~~~~~
  370 |    BG_CASE_HELPER(Reset);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  371 |    BG_CASE_HELPER(Black);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  372 |    BG_CASE_HELPER(Red);
      |    ~~~~~~~~~~~~~~~~~~~~
  373 |    BG_CASE_HELPER(Green);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  374 |    BG_CASE_HELPER(Yellow);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  375 |    BG_CASE_HELPER(Blue);
      |    ~~~~~~~~~~~~~~~~~~~~~
  376 |    BG_CASE_HELPER(Magenta);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~
  377 |    BG_CASE_HELPER(Cyan);
      |    ~~~~~~~~~~~~~~~~~~~~~
  378 |    BG_CASE_HELPER(White);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  379 | 
      |                   
  380 |    /* Font Style */
      |    ~~~~~~~~~~~~~~~~
  381 |    FS_CASE_HELPER(Bold);
      |    ~~~~~~~~~~~~~~~~~~~~~
  382 |    FS_CASE_HELPER(Faint);
      |    ~~~~~~~~~~~~~~~~~~~~~~
  383 |    FS_CASE_HELPER(Italic);
      |    ~~~~~~~~~~~~~~~~~~~~~~~
  384 |    FS_CASE_HELPER(Underline);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~
  385 |    FS_CASE_HELPER(UnderlineOff);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  386 |    FS_CASE_HELPER(CrossedOut);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  387 |    FS_CASE_HELPER(CrossedOutOff);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  388 | 
      |                   
  389 |    /* Misc */
      |    ~~~~~~~~~~     
  390 |    M_CASE_HELPER(FullReset);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~
  391 |    M_CASE_HELPER(SlowBlink);
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~
  392 |    M_CASE_HELPER(BlinkOff);
      |    ~~~~~~~~~~~~~~^~~~~~~~
      |                  |
      |                  dash::M
include/console.hpp:41:11: note: in definition of macro ‘CASE_HELPER’
   41 |  case ec::e: \
      |           ^
include/console.hpp:392:4: note: in expansion of macro ‘M_CASE_HELPER’
  392 |    M_CASE_HELPER(BlinkOff);
      |    ^~~~~~~~~~~~~
include/console.hpp: In instantiation of ‘void dash::Console::write(Args&& ...) [with Args = {dash::FG, const char (&)[4], dash::FG, dash::BG, const char (&)[4], char}]’:
src/main.cxx:12:13:   required from here
include/console.hpp:153:18: error: no match for ‘operator<<’ (operand types are ‘std::ostream’ {aka ‘std::basic_ostream<char>’} and ‘dash::FG’)
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:108:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:108:36: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)’ {aka ‘std::basic_ostream<char>& (*)(std::basic_ostream<char>&)’}
  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:117:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]’
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:117:32: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘std::basic_ostream<char>::__ios_type& (*)(std::basic_ostream<char>::__ios_type&)’ {aka ‘std::basic_ios<char>& (*)(std::basic_ios<char>&)’}
  117 |       operator<<(__ios_type& (*__pf)(__ios_type&))
      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:127:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:127:30: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘std::ios_base& (*)(std::ios_base&)’
  127 |       operator<<(ios_base& (*__pf) (ios_base&))
      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:166:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  166 |       operator<<(long __n)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:166:23: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘long int’
  166 |       operator<<(long __n)
      |                  ~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:170:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  170 |       operator<<(unsigned long __n)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:170:32: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘long unsigned int’
  170 |       operator<<(unsigned long __n)
      |                  ~~~~~~~~~~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:174:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  174 |       operator<<(bool __n)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:174:23: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘bool’
  174 |       operator<<(bool __n)
      |                  ~~~~~^~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:702,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ostream.tcc:91:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]’
   91 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ostream.tcc:92:22: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘short int’
   92 |     operator<<(short __n)
      |                ~~~~~~^~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:181:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  181 |       operator<<(unsigned short __n)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:181:33: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘short unsigned int’
  181 |       operator<<(unsigned short __n)
      |                  ~~~~~~~~~~~~~~~^~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:702,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ostream.tcc:105:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]’
  105 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ostream.tcc:106:20: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘int’
  106 |     operator<<(int __n)
      |                ~~~~^~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:192:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  192 |       operator<<(unsigned int __n)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:192:31: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘unsigned int’
  192 |       operator<<(unsigned int __n)
      |                  ~~~~~~~~~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:201:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  201 |       operator<<(long long __n)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:201:28: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘long long int’
  201 |       operator<<(long long __n)
      |                  ~~~~~~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:205:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  205 |       operator<<(unsigned long long __n)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:205:37: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘long long unsigned int’
  205 |       operator<<(unsigned long long __n)
      |                  ~~~~~~~~~~~~~~~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:220:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  220 |       operator<<(double __f)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:220:25: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘double’
  220 |       operator<<(double __f)
      |                  ~~~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:224:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  224 |       operator<<(float __f)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:224:24: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘float’
  224 |       operator<<(float __f)
      |                  ~~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:232:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  232 |       operator<<(long double __f)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:232:30: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘long double’
  232 |       operator<<(long double __f)
      |                  ~~~~~~~~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:245:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]’
  245 |       operator<<(const void* __p)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:245:30: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘const void*’
  245 |       operator<<(const void* __p)
      |                  ~~~~~~~~~~~~^~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:250:7: note: candidate: ‘std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::nullptr_t) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::nullptr_t = std::nullptr_t]’
  250 |       operator<<(nullptr_t)
      |       ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:250:18: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘std::nullptr_t’
  250 |       operator<<(nullptr_t)
      |                  ^~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:702,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ostream.tcc:119:5: note: candidate: ‘std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]’
  119 |     basic_ostream<_CharT, _Traits>::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ostream.tcc:120:34: note:   no known conversion for argument 1 from ‘dash::FG’ to ‘std::basic_ostream<char>::__streambuf_type*’ {aka ‘std::basic_streambuf<char>*’}
  120 |     operator<<(__streambuf_type* __sbin)
      |                ~~~~~~~~~~~~~~~~~~^~~~~~
In file included from src/main.cxx:1:
include/console.hpp:356:23: note: candidate: ‘std::ostream& dash::operator<<(std::ostream&, int)’
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |                       ^~~~~~~~
include/console.hpp:356:56: note:   no known conversion for argument 2 from ‘dash::FG’ to ‘int’
  356 |  inline std::ostream& operator<<(std::ostream& os, Mod m) {
      |                                                    ~~~~^
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/basic_string.h:48,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/string:55,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/locale_classes.h:40,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ios_base.h:41,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ios:42,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:38,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/string_view:582:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, std::basic_string_view<_CharT, _Traits>)’
  582 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/string_view:582:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   mismatched types ‘std::basic_string_view<_CharT, _Traits>’ and ‘dash::FG’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/string:55,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/locale_classes.h:40,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ios_base.h:41,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ios:42,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:38,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/basic_string.h:6416:5: note: candidate: ‘template<class _CharT, class _Traits, class _Alloc> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&)’
 6416 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/basic_string.h:6416:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   mismatched types ‘const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>’ and ‘dash::FG’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ios_base.h:46,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ios:42,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:38,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/system_error:217:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const std::error_code&)’
  217 |     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/system_error:217:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘const std::error_code&’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:506:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, _CharT)’
  506 |     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:506:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   deduced conflicting types for parameter ‘_CharT’ (‘char’ and ‘dash::FG’)
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:511:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char)’
  511 |     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:511:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘char’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:517:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char)’
  517 |     operator<<(basic_ostream<char, _Traits>& __out, char __c)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:517:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘char’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:523:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char)’
  523 |     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:523:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘signed char’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:528:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char)’
  528 |     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:528:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘unsigned char’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:548:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const _CharT*)’
  548 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:548:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   mismatched types ‘const _CharT*’ and ‘dash::FG’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:702,
                 from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ostream.tcc:321:5: note: candidate: ‘template<class _CharT, class _Traits> std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*)’
  321 |     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/bits/ostream.tcc:321:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘const char*’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:565:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*)’
  565 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:565:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘const char*’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:578:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*)’
  578 |     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:578:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘const signed char*’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:583:5: note: candidate: ‘template<class _Traits> std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*)’
  583 |     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:583:5: note:   template argument deduction/substitution failed:
In file included from src/main.cxx:1:
include/console.hpp:153:18: note:   cannot convert ‘std::forward<dash::FG>((* & args#0))’ (type ‘dash::FG’) to type ‘const unsigned char*’
  153 |      ((std::cout << std::forward<Args>(args)), ...) << Opt<M::FullReset>();
      |       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/iostream:39,
                 from include/console.hpp:2,
                 from src/main.cxx:1:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:691:5: note: candidate: ‘template<class _Ostream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_ostream<_Ostream>, std::__is_insertable<typename std::__is_convertible_to_basic_ostream<_Tp>::__ostream_type, const _Tp&, void> >::value, typename std::__is_convertible_to_basic_ostream<_Tp>::__ostream_type>::type std::operator<<(_Ostream&&, const _Tp&)’
  691 |     operator<<(_Ostream&& __os, const _Tp& __x)
      |     ^~~~~~~~
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:691:5: note:   template argument deduction/substitution failed:
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream: In substitution of ‘template<class _Ostream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_ostream<_Ostream>, std::__is_insertable<typename std::__is_convertible_to_basic_ostream<_Tp>::__ostream_type, const _Tp&, void> >::value, typename std::__is_convertible_to_basic_ostream<_Tp>::__ostream_type>::type std::operator<<(_Ostream&&, const _Tp&) [with _Ostream = std::basic_ostream<char>&; _Tp = dash::FG]’:
include/console.hpp:153:18:   required from ‘void dash::Console::write(Args&& ...) [with Args = {dash::FG, const char (&)[4], dash::FG, dash::BG, const char (&)[4], char}]’
src/main.cxx:12:13:   required from here
/home/jonpdickert/opt/gcc-9.2.0/include/c++/9.2.0/ostream:691:5: error: no type named ‘type’ in ‘struct std::enable_if<false, std::basic_ostream<char>&>’
Makefile:81: recipe for target 'obj/main.out' failed
make: *** [obj/main.out] Error 1

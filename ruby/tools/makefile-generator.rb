#!/bin/ruby
require 'optparse'
require 'ostruct'
require 'sys_helpers'

#######################
### Option Parsing ####
#######################

options = OpenStruct.new
options.exe = SysHelpers.this_dir
options.cxx = 'g++'
options.cxx_flags =  []
options.include = []
options.include_spec = []
options.static = []
options.static_spec = []
options.shared = []
options.shared_spec = []
options.library_dirs = []
options.library_dirs_spec = []
options.install = false

DEFAULT_CXX_FLAGS = ["Wall", "Wextra", "std=c++17", "O3", "march=native", "frename-registers", "funroll-loops"]
DEFAULT_INCLUDE = [ "include" ]
DEFAULT_INCLUDE_SPEC = [ "$(CSPEC_INCLUDE)" ]
DEFAULT_SHARED_SPEC = [ "cspec" ]

OptionParser.new() do |opts|
    opts.on("-e", "--exe [NAME]", "The name of the executable") do |v|
	options.exe = v
    end

    opts.on("-c", "--cxx [CXX]", "The compiler to use, can be gcc or g++") do |v|
	options.cxx = v
    end

    opts.on("-f", "--flag [FLAG]", "A cxx flag; Flags must be surrounded in quotes") do |v|
	options.cxx_flags.push v
    end

    opts.on('', "--include [INCLUDE]", "An include dir to use") do |v|
	options.include.push v
    end

    opts.on('', "--include-spec [INCLUDE]", "An include dir to use for specs") do |v|
	options.include_spec.push v
    end

    opts.on('', "--static [LIB]", "A static library to use") do |v|
	options.static.push v
    end

    opts.on('', "--static-spec [LIB]", "A static library to use when building specs") do |v|
	options.static_spec.push v
    end

    opts.on('', "--shared [LIB]", "A shared library to use") do |v|
	options.shared.push v
    end

    opts.on('', "--shared-spec [LIB]", "A shared library to use when building specs") do |v|
	options.shared_spec.push v
    end

    opts.on('', "--library [LIB]", "A library directory") do |v|
	options.library_dirs.push v
    end

    opts.on('', "--library-spec [LIB]", "A library directory when building specs") do |v|
	options.library_dirs_spec.push v
    end

    opts.on('', "--install [DIR]", "Create a target to install to DIR") do |v|
	options.install = v
    end
end.parse!

if !options.exe
    puts "-e, --exe is required"
    exit 1
end

if !options.cxx
    puts "-c, --cxx is required"
    exit 1
end

###########################
### Makefile Generation ###
###########################

def derive_autogen_commands(opts)
    str = "autogenerated with: makefile-generator.rb"
    str = "#{str} -e #{opts.exe}"
    str = "#{str} -c #{opts.cxx}" if opts.cxx
    str = "#{str} #{opts.cxx_flags.map{ |f| "-f #{f}" }.join(' ')}" if opts.cxx_flags
    str = "#{str} #{opts.include.map{ |i| "--include #{i}" }.join(' ')}" if opts.include
    str = "#{str} #{opts.include_spec.map { |i| "--include-spec #{i}" }.join(' ')}" if opts.include_spec
    str = "#{str} #{opts.static.map{ |s| "--static #{s}" }.join(' ')}" if opts.static
    str = "#{str} #{opts.static_spec.map{ |s| "--static-spec #{s}" }.join(' ')}" if opts.static_spec
    str = "#{str} #{opts.shared.map{ |s| "--shared #{s}" }.join(' ')}" if opts.shared
    str = "#{str} #{opts.shared_spec.map{ |s| "--shared-spec #{s}" }.join(' ')}" if opts.shared_spec
end

MAKEFILE = <<-MAKEFILE
# #{derive_autogen_commands(options)}

#################
### Functions ###
#################

rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))

#################
### Variables ###
#################

EXE			:= #{options.exe}
EXE_SPEC		:= #{options.exe}.spec

CXX			:= #{options.cxx}
CXX_FLAGS 		:= #{(options.cxx_flags + DEFAULT_CXX_FLAGS).map{ |f| "-#{f}" }.join(' ')}

SRC			:= src
INCLUDE			:= include
SPEC			:= spec
BIN			:= bin
OBJ			:= obj

MAIN			:= main
MAIN_CXX		:= $(MAIN).cxx
MAIN_OBJ		:= $(MAIN).out

INCLUDE_DIRS		:= #{(options.include + DEFAULT_INCLUDE).map{ |i| "-I#{i}" }.join(' ')}
INCLUDE_DIRS_SPEC	:= $(INCLUDE_DIRS) #{(options.include_spec + DEFAULT_INCLUDE_SPEC).map{ |i| "-I#{i}" }.join(' ')}

STATIC_LIBS		:= #{options.static.join(' ')}
STATIC_LIBS_SPEC	:= $(STATIC_LIBS) #{options.static_spec.join(' ')}

SHARED_LIBS		:= #{options.shared.map{ |s| "-l#{s}" }.join(' ')}
SHARED_LIBS_SPEC	:= $(SHARED_LIBS) #{(options.shared_spec + DEFAULT_SHARED_SPEC).map{ |s| "-l#{s}" }.join(' ')}

LIBRARY_DIRS		:= #{options.library_dirs.map{ |l| "-L#{l}" }.join(' ')}
LIBRARY_DIRS_SPEC	:= $(LIBRARY_DIRS) #{options.library_dirs_spec.map{ |l| "-L#{l}" }.join(' ')}
#{
    if options.install
	<<-INSTALL 
INSTALL_DIR		:= #{options.install}\n
	INSTALL
    end
}
SRC_FILES	:= $(call rwildcard,$(SRC),*.cpp)
SRC_OBJ_FILES	:= $(patsubst $(SRC)/%.cpp, $(OBJ)/%.o, $(SRC_FILES))

SPEC_FILES	:= $(call rwildcard,$(SPEC),*.spec.cpp)
SPEC_OBJ_FILES	:= $(patsubst $(SPEC)/%.spec.cpp, $(OBJ)/%.spec.o, $(SPEC_FILES))

################
### Targets  ###
################

.PHONY: all
all: setup $(BIN)/$(EXE) $(BIN)/$(EXE_SPEC)

.PHONY: setup
setup: $(SRC) $(INCLUDE) $(SPEC) $(BIN) $(OBJ)

.PHONY: clean
clean:
	-rm $(BIN)/* $(OBJ)/*

.PHONY: force
force: clean all
#{  
if options.install 
    <<-INSTALL
.PHONY: install
install:
	@install $(BIN)/$(EXE) #{options.install}\n
    INSTALL
end 
}
$(BIN)/$(EXE): $(SRC_OBJ_FILES) $(OBJ)/$(MAIN_OBJ)
	$(CXX) $(CXX_FLAGS) $(LIBRARY_DIRS) $^ $(STATIC_LIBS) -o $@ $(SHARED_LIBS)

$(BIN)/$(EXE_SPEC): $(SPEC_OBJ_FILES) $(SRC_OBJ_FILES)
	$(CXX) $(CXX_FLAGS) $(LIBRARY_DIRS_SPEC) $^ $(STATIC_LIBS_SPEC) -o $@ $(SHARED_LIBS_SPEC)

$(OBJ)/$(MAIN_OBJ): $(SRC)/$(MAIN_CXX)
	$(CXX) $(CXX_FLAGS) -c $(INCLUDE_DIRS) $< -o $(OBJ)/$(MAIN_OBJ)

$(OBJ)/%.o: $(SRC)/%.cpp
	$(CXX) $(CXX_FLAGS) -c $(INCLUDE_DIRS) $< -o $@

$(OBJ)/%.spec.o: $(SPEC)/%.spec.cpp
	$(CXX) $(CXX_FLAGS) -c $(INCLUDE_DIRS_SPEC) $< -o $@

$(SRC):
	@mkdir -p $@

$(INCLUDE):
	@mkdir -p $@

$(SPEC):
	@mkdir -p $@

$(BIN):
	@mkdir -p $@

$(OBJ):
	@mkdir -p $@

MAKEFILE

##############
### Output ###
##############

File.open("Makefile", "w") do |file|
    file.write(MAKEFILE)
end

puts "Done!"

